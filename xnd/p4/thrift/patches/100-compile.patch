Index: thrift-0.13.0/lib/c_glib/src/thrift/c_glib/protocol/thrift_compact_protocol.c
===================================================================
--- thrift-0.13.0.orig/lib/c_glib/src/thrift/c_glib/protocol/thrift_compact_protocol.c
+++ thrift-0.13.0/lib/c_glib/src/thrift/c_glib/protocol/thrift_compact_protocol.c
@@ -31,12 +31,6 @@
  * operator on a signed integer is an arithmetic (sign-extending) shift.
  * If this is not the case, the current implementation will not work.
  */
-#if !defined(SIGNED_RIGHT_SHIFT_IS) || !defined(ARITHMETIC_RIGHT_SHIFT)
-# error "Unable to determine the behavior of a signed right shift"
-#endif
-#if SIGNED_RIGHT_SHIFT_IS != ARITHMETIC_RIGHT_SHIFT
-# error "thrift_compact_protocol only works if signed right shift is arithmetic"
-#endif
 
 /* object properties */
 enum _ThriftCompactProtocolProperties
Index: thrift-0.13.0/lib/cpp/src/thrift/protocol/TCompactProtocol.tcc
===================================================================
--- thrift-0.13.0.orig/lib/cpp/src/thrift/protocol/TCompactProtocol.tcc
+++ thrift-0.13.0/lib/cpp/src/thrift/protocol/TCompactProtocol.tcc
@@ -30,12 +30,6 @@
  * If anyone encounters this error, we can try to figure out the best
  * way to implement an arithmetic right shift on their platform.
  */
-#if !defined(SIGNED_RIGHT_SHIFT_IS) || !defined(ARITHMETIC_RIGHT_SHIFT)
-# error "Unable to determine the behavior of a signed right shift"
-#endif
-#if SIGNED_RIGHT_SHIFT_IS != ARITHMETIC_RIGHT_SHIFT
-# error "TCompactProtocol currently only works if a signed right shift is arithmetic"
-#endif
 
 #ifdef __GNUC__
 #define UNLIKELY(val) (__builtin_expect((val), 0))
